FROM ubuntu:22.04
LABEL MAINTAINER sangkyulee@gmail.com

# Test image locally
#   cd arcion-demo
#   docker build -t robertslee/arcdemo:test -f load-generator/Dockerfile.arcdemo .
#   docker build -t robertslee/arcdemo -f load-generator/Dockerfile.arcdemo .
# Publish amd64, arm64  
#   docker buildx create --name mybuilder
#   docker buildx use mybuilder
#   docker buildx inspect --bootstrap
#   docker buildx build --push --platform=linux/amd64,linux/arm64/v8 -t robertslee/arcdemo -f load-generator/Dockerfile.arcdemo .
# To start a container 
#     docker run -it --rm -p 7681:7681 robertslee/arcdemo
# To push to docker hub
#     docker tag 597de83199f4 robertslee/arcdemo
#     docker push robertslee/arcdemo
#
# For ghcr (Github container registery)
#    docker images | grep arcdemo
#    docker tag a1985aa6af86 ghcr.io/arcionlabs/arcdemo
#    docker push ghcr.io/arcionlabs/arcdemo:latest

# required to make tools handle UTF-8 characters by default
ENV LANG=C.UTF-8
ENV TERM=ansi

# arcion demo specific configuration
ENV ARCION_HOME=/arcion
ENV VERIFICATOR_HOME=/arcion_verificator
ENV SCRIPTS_DIR=/scripts
ENV OPT_DIR=/opt
ENV MARIADB_DIR=/opt/mariadb
ENV MYSQL_DIR=/opt/mysql
ENV JSQSH_DIR=/opt/jsqsh
ENV MINIO_DIR=/opt/minio
ENV KAFKA_DIR=/opt/confluent
ENV BENCHBASE_DIR=/opt/benchbase
ENV ARCDEV_DIR=/opt/arcion

# YCSB version
ENV YCSB_VERSION=0.17.0 \
    YCSB_BINDING="mongodb-binding jdbc-binding" \
    PATH=${PATH}:/usr/bin
ENV YCSB=/opt/ycsb

# ********************************************************
# setup user account copy / paste from 
# https://code.visualstudio.com/remote/advancedcontainers/add-nonroot-user
# ********************************************************

# using bindfs makes reading/writing about 10x slower
# make arcion use oracle uid:gid where shared docker volume is used to for
# native reader, sqlldr, external tables, dmp/imp
# must be 54321:54322 to match oracle's UID:GID
 
ARG USERNAME=arcion
ARG USER_UID=54321
ARG USER_GID=54322

# Create the user
RUN groupadd --gid $USER_GID $USERNAME \
    && useradd --shell /bin/bash --uid $USER_UID --gid $USER_GID -m $USERNAME \
    #
    # [Optional] Add sudo support. Omit if you don't need to install software after connecting.
    && apt-get update \
    && apt-get install -y sudo \
    && echo $USERNAME ALL=\(root\) NOPASSWD:ALL > /etc/sudoers.d/$USERNAME \
    && chmod 0440 /etc/sudoers.d/$USERNAME

# ********************************************************
# regular user installation
# ********************************************************

# fix sysbench 
# RUN echo "deb [trusted=yes] http://deb.debian.org/debian bullseye-backports main" >> /etc/apt/sources.list.d/debian.bullseye-backports.main.list

# Java 8 for Arcion
# Java 17 for other tools 
RUN apt-get update && apt-get install -y curl openjdk-17-jdk openjdk-8-jre && java -version
# sudo update-alternatives --config java

# add pg, mysql, postgres
RUN DEBIAN_FRONTEND=noninteractive TZ="America/New_York" apt-get install -y \
    tzdata \
    mysql-client \
    postgresql-client postgresql postgresql-contrib \
    redis-tools

# add sysbench 
# RUN apt-get install -y sysbench

# add ttyd for running terminal commands
# libaio1 for Oracle
RUN apt-get update && apt-get install -y \
    tmux \
    figlet \
    vim \
    pcp \
    gettext \
    net-tools \
    host \
    nmap \
    less \
    python3-pip \
    python3-venv \
    jq \
    bc \
    unzip \
    groff \
    bindfs \
    tcpdump \
    libaio1 \
    git \
    htop \
    lsb-release \
    dialog \
    apt-utils \
    glances \
    dnsutils
    
# get TTYD from bullseye-backports main
RUN apt-get -y install ttyd

# mongodb support
RUN apt-get -y install wget && \
    apt-get -y install gnupg && \
    wget -qO - https://www.mongodb.org/static/pgp/server-6.0.asc | sudo apt-key add - && \
    echo "deb [ arch=amd64,arm64 ] https://repo.mongodb.org/apt/ubuntu jammy/mongodb-org/6.0 multiverse" | sudo tee /etc/apt/sources.list.d/mongodb-org-6.0.list && \
    apt-get update && \
    apt-get install -y mongodb-mongosh

# add asciinema and cargo (required ffor agg install that does gif generation)
RUN apt-get update && apt-get install -y asciinema cargo expect 

RUN apt-get update && apt-get install -y rclone

# add YCSB with just JDBC binding
RUN mkdir -p $OPT_DIR && chown -R $USERNAME $OPT_DIR
RUN mkdir -p $YCSB && chown -R $USERNAME $YCSB
RUN mkdir -p $ARCION_HOME && chown -R $USERNAME $ARCION_HOME
RUN mkdir -p $VERIFICATOR_HOME && chown -R $USERNAME $VERIFICATOR_HOME
RUN mkdir -p $SCRIPTS_DIR && chown -R $USERNAME $SCRIPTS_DIR
RUN mkdir -p $MARIADB_DIR && chown -R $USERNAME $MARIADB_DIR
RUN mkdir -p $MYSQL_DIR && chown -R $USERNAME $MYSQL_DIR
RUN mkdir -p $MINIO_DIR && chown -R $USERNAME $MINIO_DIR
RUN mkdir -p $JSQSH_DIR && chown -R $USERNAME $JSQSH_DIR
RUN mkdir -p $KAFKA_DIR && chown -R $USERNAME $KAFKA_DIR
RUN mkdir -p $BENCHBASE_DIR && chown -R $USERNAME $BENCHBASE_DIR
RUN mkdir -p $ARCDEV_DIR && chown -R $USERNAME $ARCDEV_DIR

# run as regular user beyond this point
USER $USERNAME

# asciinema to gif
# TODO: agg does not reliablly compile
# RUN cargo install --git https://github.com/asciinema/agg

# setup load generators

# download ycsb and add setenv.sh that sets CLASSPATH
COPY --chown=${USERNAME} scripts/utils/ycsb/setenv.sh $YCSB/. 
RUN cd ${YCSB}; \
    curl -O --location https://github.com/databricks/YCSB/releases/download/arcion-23.07/ycsb-jdbc-binding-0.18.0-SNAPSHOT.tar.gz && \
    curl -O --location https://github.com/brianfrankcooper/YCSB/releases/download/0.17.0/ycsb-mongodb-binding-0.17.0.tar.gz && \
    for f in $( ls *gz ); do tar -xvf $f; rm $f; done && \
    for d in $( find . -mindepth 1 -maxdepth 1  -type d ); do cp setenv.sh $d/bin/.; done

# benchbase
RUN cd ${BENCHBASE_DIR}; \
    curl -O --location https://github.com/databricks/benchbase/releases/download/arcion-23.08/benchbase-arcion.tgz; \
    for f in $( ls *gz ); do tar -xvf $f; rm $f; done

# /usr/share/sysbench/oltp_common.lua
# schema with ts column so that delta snap can work
# COPY  scripts/utils/sysbench/oltp_common.lua /usr/share/sysbench/. 

# download mariadb for the binlog reader 
RUN cd ${MARIADB_DIR} \
    && mkdir -p 10.6 \
    && cd 10.6 \
    && apt-get download mariadb-server-10.6 \
    && ls *.deb | xargs -I % dpkg -x % . \
    && rm *.deb 

# download mysql for the binlog reader
RUN cd ${MYSQL_DIR} \
    && apt-get download mysql-server-core-8.0 \
    && ls *.deb | xargs -I % dpkg -x % . \
    && rm *.deb   

# download jsqsh
RUN cd ${JSQSH_DIR} \
    && wget https://github.com/databricks/jsqsh/releases/download/arcionlabs/jsqsh-dist-3.0-SNAPSHOT-bin.tar.gz \
    && gzip -dc jsqsh* | tar -xvf - \
    && rm *.tar.gz

# download kafka
# https://docs.confluent.io/confluent-cli/current/overview.html#confluent-cli-overview
#RUN cd ${KAFKA_DIR} \
#    && curl -sL --http1.1 https://cnfl.io/cli | sh -s -- latest


# download minio client
# TODO: not sure how to do this
# TARGETARCH=$(arch | sed s/aarch64/arm64/ | sed s/x86_64/amd64/)
RUN TARGETARCH=$(arch | sed s/aarch64/arm64/ | sed s/x86_64/amd64/) \
    && cd $MINIO_DIR \
    && curl -O --location https://dl.min.io/client/mc/release/linux-${TARGETARCH}/mc \
    && chmod a+x mc

EXPOSE 7681

# arcion binary
COPY --chown=${USERNAME} replicant-cli/ ${ARCION_HOME}
COPY --chown=${USERNAME} replicate-row-verificator/ ${VERIFICATOR_HOME}

# jbang
# RUN curl -Ls https://sh.jbang.dev | bash -s - app setup

# benerator data generator
# RUN cd /opt \
#    && wget https://github.com/rapiddweller/rapiddweller-benerator-ce/releases/download/3.1.0/rapiddweller-benerator-ce-3.1.0-jdk-11-dist.tar.gz \
#    && gzip -dc rapiddweller-benerator-ce-3.1.0-jdk-11-dist.tar.gz | tar -xvf - \
#    && chmod a+x rapiddweller-benerator-ce-3.1.0-jdk-11/bin/* \
#    && rm rapiddweller-benerator-ce-3.1.0-jdk-11-dist.tar.gz
#
#ENV BENERATOR_HOME=/opt/rapiddweller-benerator-ce-3.1.0-jdk-11
#COPY --chown=${USERNAME} scripts/lib/rapiddweller/demo.env.properties  /home/${USERNAME}/rapiddweller/demo.env.properties

# jsqsh
# connection.xml causes exception on some docker host
RUN mkdir -p /home/${USERNAME}/.jsqsh
RUN touch /home/${USERNAME}/.jsqsh/.welcome
COPY --chown=${USERNAME} scripts/utils/jsqsh/connections.xml /home/${USERNAME}/.jsqsh/.
COPY --chown=${USERNAME} scripts/utils/jsqsh/drivers.xml /home/${USERNAME}/.jsqsh/.

# python requirements
COPY --chown=${USERNAME} requirements.txt /home/${USERNAME}/requirements.txt
RUN pip3 install -U -r /home/${USERNAME}/requirements.txt

# scripts 
COPY --chown=${USERNAME} scripts/ /scripts/
WORKDIR /scripts

# YCSB HOMEs
ENV YCSB_JDBC=$YCSB/ycsb-jdbc-binding-0.18.0-SNAPSHOT
ENV YCSB_MONGODB=$YCSB/ycsb-mongodb-binding-0.17.0

# stage dir for null applier 
RUN echo /opt/stage /opt/stage/loadgen /opt/stage/tmpfs /opt/stage/oraee1930 /opt/stage/oraxe2130 /opt/stage/orashared /opt/oracle/share | xargs -n 1 | xargs -I%% mkdir -p %% \&\& chown $USER_UID:$USER_GID %%

# create dirs and reamp external uid to internal
#RUN sudo mkdir /libs 
#RUN sudo chown -R $USERNAME /libs
RUN mkdir /opt/mnt 
RUN mkdir /home/arcion/sqllib

ENV PATH=PATH=/home/arcion/.cargo/bin:/home/arcion/.local/bin:/scripts/bin:/scripts/utils:/scripts:/opt/jsqsh/jsqsh-dist-3.0-SNAPSHOT/bin:/opt/rapiddweller-benerator-ce-3.1.0-jdk-11/bin:/opt/minio:$PATH

CMD /scripts/utils/init.d/arcdemo-init.sh